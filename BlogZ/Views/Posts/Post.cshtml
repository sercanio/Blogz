@model PostViewModel

@{
    ViewData["Title"] = Model.Post?.Title ?? "Post";
}

<partial name="_BlogHeaderPartial" model="Model.Blog" />

<div class="container px-4 px-lg-5">
    <div class="row gx-4 gx-lg-5 justify-content-center">
        <div class="col-md-10 col-lg-9">
            <!-- Post content -->
            <article class="w-100 d-flex flex-column gap-2">
                <!-- Post Cover Image -->
                <img src="@(string.IsNullOrEmpty(Model?.Post?.CoverImageURL) ? Url.Content("~/assets/img/default-cover.png") : Model.Post.CoverImageURL)" alt="Post cover image" class="img-fluid mb-4" />

                <h1 class="post-title">@Model?.Post?.Title</h1>

                <!-- Display Post Public Status and Delete Icon -->
                <div class="d-flex justify-content-between align-items-center mb-3">
                    @if (User.Identity.IsAuthenticated &&
                    (User.Identity.Name == Model.Author.User.UserName ||
                    User.IsInRole("Moderator") ||
                    User.IsInRole("Admin")))
                    {
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge @(Model.Post.IsPublic ? "bg-success" : "bg-secondary")">
                                @(Model.Post.IsPublic ? "Public" : "Private")
                            </span>
                            <!-- Delete Icon -->
                            <a href="#" class="text-danger" onclick="deletePost('@Model.Post.Slug')">
                                <i class="bi bi-trash"></i> <!-- Assuming Bootstrap Icons for delete icon -->
                            </a>
                        </div>
                    }
                </div>

                <p class="post-meta">
                    Posted by
                    <a href="@Url.Action("Blog", "Blogs", new { username = Model?.Author?.User?.UserName })">@Model?.Author?.User?.UserName</a>
                    on @Model?.Post?.CreatedDate.ToString("MMMM dd, yyyy")
                </p>
                @if (User.Identity.IsAuthenticated && User.Identity.Name == Model.Author.User.UserName)
                {
                    <div class="d-flex justify-content-start align-items-center gap-2">
                        <a href="@Url.Action("Edit", "Posts", new { username = Model.Author.User.UserName, slug = Model.Post.Slug })" class="ml-auto">Edit Post</a>
                    </div>
                }
                <!-- Divider -->
                <hr class="my-4" />
                <div>
                    @Html.Raw(Model?.Post?.Content)
                </div>
            </article>

            <!-- Divider -->
            <hr class="my-4" />

            <!-- Comments Section -->
            <div class="comments-section">
                <h2>Comments</h2>
                @if (Model.Comments != null && Model.Comments.Any())
                {
                    <ul class="list-unstyled" id="comments-list">
                        @foreach (var comment in Model.Comments)
                        {
                            <li class="mb-4 p-3 border rounded" data-comment-id="@comment.Id">
                                <div class="d-flex align-items-center mb-4">
                                    <img src="@comment.Author.ProfileImageURL" alt="Profile image" class="rounded-circle me-2" style="width: 40px; height: 40px;">
                                    <div>
                                        <strong>@comment.Author.User.UserName</strong>
                                        <span class="text-muted ms-2">@comment.CreatedDate.ToString("MMMM dd, yyyy")</span>
                                    </div>
                                    @if (User.Identity.IsAuthenticated &&
                                   (User.Identity.Name == comment.Author.User.UserName ||
                                   User.IsInRole("Moderator") ||
                                   User.IsInRole("Admin")))
                                    {
                                        <a href="#" class="text-danger ms-auto" onclick="deleteComment('@comment.Id')">
                                            <i class="bi bi-trash"></i>
                                        </a>
                                    }
                                </div>
                                <p class="mt-2">@comment.Content</p>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>No comments yet.</p>
                }

                <!-- Post Comment Form -->
                @if (User.Identity.IsAuthenticated)
                {
                    <form id="comment-form">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="PostId" value="@Model.Post.Id" />
                        <input type="hidden" name="AuthorId" value="@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)" />
                        <div class="form-group">
                            <textarea name="Content" class="form-control" rows="3" placeholder="Add a comment..." required></textarea>
                        </div>
                        <button type="submit" class="btn btn-new-post mt-3">Post Comment</button>
                    </form>
                }
                else
                {
                    <p><a href="@Url.Action("Login", "Account")">Log in</a> to post a comment.</p>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script>
        async function deletePost(slug) {
            if (confirm('Are you sure you want to delete this post?')) {
                const response = await fetch(`/posts/delete/${slug}`, {
                    method: 'DELETE',
                    headers: {
                        'X-Request-Width': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.redirected) {
                    window.location.href = response.url; // Redirect to the URL provided in the response
                } else {
                    alert('Failed to delete the post.');
                }
            }
        }

        async function deleteComment(commentId) {
            if (confirm('Are you sure you want to delete this comment?')) {
                const response = await fetch(`/posts/comment/delete/${commentId}`, {
                    method: 'DELETE',
                    headers: {
                        'X-Request-Width': 'XMLHttpRequest',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    document.querySelector(`[data-comment-id="${commentId}"]`).remove();
                } else {
                    alert('Failed to delete the comment.');
                }
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const commentForm = document.querySelector('#comment-form');
            commentForm.addEventListener('submit', async function (event) {
                event.preventDefault();

                const formData = new FormData(commentForm);

                try {
                    const response = await fetch('/posts/comment', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Request-Width': 'XMLHttpRequest',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    if (response.headers.get('Content-Type')?.includes('application/json')) {
                        const result = await response.json();

                        if (response.ok && result.success) {
                            const commentsList = document.querySelector('#comments-list');

                            let createdDate = new Date(result.comment.createdDate);
                            if (isNaN(createdDate)) {
                                createdDate = new Date(); // Use the current date if the date is invalid
                            }

                            const newCommentHtml = `
                                        <li class="mb-4 p-3 border rounded" data-comment-id="${result.comment.id}">
                                            <div class="d-flex align-items-center mb-4">
                                                <img src="${result.comment.author.profileImageURL}" alt="Profile image" class="rounded-circle me-2" style="width: 40px; height: 40px;">
                                                <div>
                                                    <strong>${result.comment.author.user.userName}</strong>
                                                    <span class="text-muted ms-2">${createdDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
                                                </div>
                                                ${result.isCurrentUser || result.isModeratorOrAdmin ? `
                                                <a href="#" class="text-danger ms-auto" onclick="deleteComment('${result.comment.id}')">
                                                    <i class="bi bi-trash"></i>
                                                </a>` : ''}
                                            </div>
                                            <p class="mt-2">${result.comment.content}</p>
                                        </li>
                                    `;
                            commentsList.insertAdjacentHTML('beforeend', newCommentHtml);
                            commentForm.reset();
                        } else {
                            throw new Error(result.message || 'Failed to post comment.');
                        }
                    } else {
                        throw new Error('Response is not JSON.');
                    }
                } catch (error) {
                    alert(error.message);
                }
            });
        });
    </script>
}
