@model CreatePostViewModel

@{
    ViewData["Title"] = "Create New Post";
}

<h1>Create New Post</h1>

@if (Model.Blog != null)
{
    <partial name="_BlogHeaderPartial" model="Model.Blog" />
}

<form asp-action="Create" method="post" enctype="multipart/form-data" class="form-horizontal col-sm-12 col-md-8 mx-auto">
    <div class="form-group d-flex gap-2 align-items-center">
        <div class="flex-fill">
            <label asp-for="Title" class="control-label"></label>
            <input asp-for="Title" class="form-control" />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>
        <div class="form-check w-25 mt-3 d-flex flex-column justify-content-center align-items-center">
            <div>
                <label asp-for="IsPublic" class="control-label form-check-label">Public</label>
                <input asp-for="IsPublic" type="checkbox" class="form-check-input" />
                <span asp-validation-for="IsPublic" class="text-danger"></span>
            </div>
        </div>
    </div>
    <div class="form-group mt-2">
        <label asp-for="Content" class="control-label"></label>
        <span asp-validation-for="Content" class="text-danger"></span>
        <textarea asp-for="Content" class="form-control">
            Welcome to TinyMCE!
        </textarea>
    </div>
    <div class="form-group mt-2">
        <label asp-for="CoverImage" class="control-label">Cover Image (Optional)</label>
        <input asp-for="CoverImage" type="file" class="form-control" />
        <span asp-validation-for="CoverImage" class="text-danger"></span>
    </div>
    <div class="form-group mt-3">
        <input type="submit" value="Create" class="btn btn-new-post" />
    </div>
</form>

@section Scripts {
    <script src="https://cdn.tiny.cloud/1/dmjmi2i6ow7orwe5hnliu17c9jgmzwy5gdjb59qctogrnve6/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            function initializeTinyMCE(theme) {
                console.log("Initializing TinyMCE with theme:", theme);
                tinymce.remove();
                tinymce.init({
                    selector: 'textarea',
                    plugins: 'anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount',
                    toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table | removeformat',
                    branding: false,
                    skin: theme === 'dark' ? 'oxide-dark' : 'oxide',
                    content_css: theme === 'dark' ? 'dark' : 'default'
                });
            }
            var currentTheme = document.documentElement.getAttribute("data-bs-theme");
            initializeTinyMCE(currentTheme);

            var observer = new MutationObserver(function (mutations) {
                mutations.forEach(function (mutation) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'data-bs-theme') {
                        currentTheme = mutation.target.getAttribute('data-bs-theme');
                        initializeTinyMCE(currentTheme);
                    }
                });
            });

            observer.observe(document.documentElement, {
                attributes: true,
            });
        });
    </script>
}
