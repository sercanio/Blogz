// <auto-generated />
using System;
using BlogZ.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240724002910_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Biography")
                        .HasColumnType("text")
                        .HasColumnName("Biography");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ProfileImageURL")
                        .HasColumnType("text")
                        .HasColumnName("ProfilePictureImageURL");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("51984c01-75fa-4b06-95eb-5dd5f09d6218"),
                            Biography = "This is John Doe's biography.",
                            BlogId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileImageURL = "https://example.com/profilepicture.jpg",
                            UserId = "e94630d6-b26f-4f20-b27d-e1bdf3ddd232"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("AuthorId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("Blogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1070a6fd-bb67-459d-8154-77d53fad104b"),
                            AuthorId = new Guid("51984c01-75fa-4b06-95eb-5dd5f09d6218"),
                            CreatedDate = new DateTime(2024, 7, 24, 0, 29, 9, 726, DateTimeKind.Utc).AddTicks(9585)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("AuthorId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("PostId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AuthorId" }, "Comment_AuthorId_Index");

                    b.HasIndex(new[] { "PostId" }, "Comment_PostId_Index");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid")
                        .HasColumnName("BlogId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverImageURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CoverImageURL");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPublic");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("67f15e6c-ad89-4f96-8907-e064de214377"),
                            BlogId = new Guid("1070a6fd-bb67-459d-8154-77d53fad104b"),
                            Content = "This post covers the basics of programming...",
                            CoverImageURL = "https://example.com/cover1.jpg",
                            CreatedDate = new DateTime(2024, 7, 24, 0, 29, 9, 726, DateTimeKind.Utc).AddTicks(9634),
                            IsPublic = true,
                            Slug = "introduction-to-programming",
                            Title = "Introduction to Programming"
                        },
                        new
                        {
                            Id = new Guid("35bafb90-e882-4920-919d-540a5c70dd46"),
                            BlogId = new Guid("1070a6fd-bb67-459d-8154-77d53fad104b"),
                            Content = "This post delves into advanced concepts in software engineering...",
                            CoverImageURL = "https://example.com/cover2.jpg",
                            CreatedDate = new DateTime(2024, 7, 24, 0, 29, 9, 726, DateTimeKind.Utc).AddTicks(9639),
                            IsPublic = true,
                            Slug = "advanced-software-engineering",
                            Title = "Advanced Software Engineering"
                        },
                        new
                        {
                            Id = new Guid("954a3d4a-c7eb-485b-95cb-c24d66a2c000"),
                            BlogId = new Guid("1070a6fd-bb67-459d-8154-77d53fad104b"),
                            Content = "Exploring the fascinating world of science...",
                            CoverImageURL = "https://example.com/cover3.jpg",
                            CreatedDate = new DateTime(2024, 7, 24, 0, 29, 9, 726, DateTimeKind.Utc).AddTicks(9641),
                            IsPublic = true,
                            Slug = "th-Wonders-of-science",
                            Title = "The Wonders of Science"
                        },
                        new
                        {
                            Id = new Guid("68b96564-2218-4489-89ba-7ddb9f608cea"),
                            BlogId = new Guid("1070a6fd-bb67-459d-8154-77d53fad104b"),
                            Content = "A comprehensive guide to building web applications with ASP.NET Core MVC...",
                            CoverImageURL = "https://example.com/cover4.jpg",
                            CreatedDate = new DateTime(2024, 7, 24, 0, 29, 9, 726, DateTimeKind.Utc).AddTicks(9643),
                            IsPublic = true,
                            Slug = "asp.net-core-mvc-tutorial",
                            Title = "ASP.NET Core MVC Tutorial"
                        },
                        new
                        {
                            Id = new Guid("28a31387-fa79-421a-9016-67f0dfda37f9"),
                            BlogId = new Guid("1070a6fd-bb67-459d-8154-77d53fad104b"),
                            Content = "Discussing the best practices every programmer should follow...",
                            CoverImageURL = "https://example.com/cover5.jpg",
                            CreatedDate = new DateTime(2024, 7, 24, 0, 29, 9, 726, DateTimeKind.Utc).AddTicks(9645),
                            IsPublic = true,
                            Slug = "best-ractices-in-rogramming",
                            Title = "Best Practices in Programming"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NormalizedName");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex(new[] { "NormalizedName" }, "Tag_NormalizedName_UK")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4315be8d-daac-4063-a14d-ee2fda04ad26"),
                            CreatedDate = new DateTime(2024, 7, 24, 0, 29, 9, 726, DateTimeKind.Utc).AddTicks(9593),
                            Description = "All things programming",
                            Name = "#Programming",
                            NormalizedName = "#PROGRAMMING"
                        },
                        new
                        {
                            Id = new Guid("deca721e-c42e-4b65-b72e-434026ee8452"),
                            CreatedDate = new DateTime(2024, 7, 24, 0, 29, 9, 726, DateTimeKind.Utc).AddTicks(9602),
                            Description = "Software engineering topics",
                            Name = "#SoftwareEngineering",
                            NormalizedName = "#SOFTWAREENGINEERING"
                        },
                        new
                        {
                            Id = new Guid("040cc631-ee0b-40dc-8dd8-50a9370f5cdc"),
                            CreatedDate = new DateTime(2024, 7, 24, 0, 29, 9, 726, DateTimeKind.Utc).AddTicks(9623),
                            Description = "Scientific discoveries and discussions",
                            Name = "#Science",
                            NormalizedName = "#SCIENCE"
                        },
                        new
                        {
                            Id = new Guid("6bcd0f3b-9a27-4db5-a551-8444d6b58509"),
                            CreatedDate = new DateTime(2024, 7, 24, 0, 29, 9, 726, DateTimeKind.Utc).AddTicks(9625),
                            Description = "ASP.NET related content",
                            Name = "#ASP.Net",
                            NormalizedName = "#ASP.NET"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "f2056a8a-6d57-47ef-aaf7-3f755ccb2cd5",
                            ConcurrencyStamp = "f2056a8a-6d57-47ef-aaf7-3f755ccb2cd5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fee93c2b-a6ad-4bfd-ad89-5236ecdd5739",
                            ConcurrencyStamp = "fee93c2b-a6ad-4bfd-ad89-5236ecdd5739",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "2d19c627-6a0f-4091-a0bd-6fd63234fd81",
                            ConcurrencyStamp = "2d19c627-6a0f-4091-a0bd-6fd63234fd81",
                            Name = "Author",
                            NormalizedName = "AUTHOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "e94630d6-b26f-4f20-b27d-e1bdf3ddd232",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0c19093-45be-494f-a3c5-a5a9a12e67f9",
                            Email = "johndoe@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EMAIL.COM",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAELwyHzMpKMA0Xq+4f3IdoFdP0IYxhS7y8Is38ErMUxMPKTpdl4mHUQ16GOtihCl+rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "e94630d6-b26f-4f20-b27d-e1bdf3ddd232",
                            RoleId = "f2056a8a-6d57-47ef-aaf7-3f755ccb2cd5"
                        },
                        new
                        {
                            UserId = "e94630d6-b26f-4f20-b27d-e1bdf3ddd232",
                            RoleId = "fee93c2b-a6ad-4bfd-ad89-5236ecdd5739"
                        },
                        new
                        {
                            UserId = "e94630d6-b26f-4f20-b27d-e1bdf3ddd232",
                            RoleId = "2d19c627-6a0f-4091-a0bd-6fd63234fd81"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Blog", b =>
                {
                    b.HasOne("Domain.Entities.Author", "Author")
                        .WithOne("Blog")
                        .HasForeignKey("Domain.Entities.Blog", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Author", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.HasOne("Domain.Entities.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.HasOne("Domain.Entities.Post", null)
                        .WithMany("Tags")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.Navigation("Blog")
                        .IsRequired();

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Domain.Entities.Blog", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
