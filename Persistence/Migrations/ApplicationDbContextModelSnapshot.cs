// <auto-generated />
using System;
using BlogZ.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Biography")
                        .HasColumnType("text")
                        .HasColumnName("Biography");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ProfileImageURL")
                        .HasColumnType("text")
                        .HasColumnName("ProfilePictureImageURL");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e1d5e51-268e-4d57-9552-ecc4f96342fa"),
                            Biography = "This is John Doe's biography.",
                            BlogId = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileImageURL = "https://example.com/profilepicture.jpg",
                            UserId = "21c958ca-ddd0-4644-bab9-1c6aabc5c0e2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("AuthorId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("Blogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b6b8840-5345-4cb8-b12a-b4a6dff8c5de"),
                            AuthorId = new Guid("2e1d5e51-268e-4d57-9552-ecc4f96342fa"),
                            CreatedDate = new DateTime(2024, 7, 22, 21, 35, 1, 230, DateTimeKind.Utc).AddTicks(2303)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("AuthorId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("PostId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AuthorId" }, "Comment_AuthorId_Index");

                    b.HasIndex(new[] { "PostId" }, "Comment_PostId_Index");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid")
                        .HasColumnName("BlogId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverImageURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CoverImageURL");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPublic");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6ee3459-a669-48fe-b96a-a2613a10eeee"),
                            BlogId = new Guid("5b6b8840-5345-4cb8-b12a-b4a6dff8c5de"),
                            Content = "This post covers the basics of programming...",
                            CoverImageURL = "https://example.com/cover1.jpg",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 35, 1, 230, DateTimeKind.Utc).AddTicks(2363),
                            IsPublic = true,
                            Slug = "introduction-to-programming",
                            Title = "Introduction to Programming"
                        },
                        new
                        {
                            Id = new Guid("5177bc7b-9829-4d0c-9260-903facca2621"),
                            BlogId = new Guid("5b6b8840-5345-4cb8-b12a-b4a6dff8c5de"),
                            Content = "This post delves into advanced concepts in software engineering...",
                            CoverImageURL = "https://example.com/cover2.jpg",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 35, 1, 230, DateTimeKind.Utc).AddTicks(2368),
                            IsPublic = true,
                            Slug = "advanced-software-engineering",
                            Title = "Advanced Software Engineering"
                        },
                        new
                        {
                            Id = new Guid("ef33b9e4-9a05-4047-8a90-94b5c5f81bc6"),
                            BlogId = new Guid("5b6b8840-5345-4cb8-b12a-b4a6dff8c5de"),
                            Content = "Exploring the fascinating world of science...",
                            CoverImageURL = "https://example.com/cover3.jpg",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 35, 1, 230, DateTimeKind.Utc).AddTicks(2372),
                            IsPublic = true,
                            Slug = "th-Wonders-of-science",
                            Title = "The Wonders of Science"
                        },
                        new
                        {
                            Id = new Guid("07d249e3-a64c-46f9-a1ed-c6f95ee9414f"),
                            BlogId = new Guid("5b6b8840-5345-4cb8-b12a-b4a6dff8c5de"),
                            Content = "A comprehensive guide to building web applications with ASP.NET Core MVC...",
                            CoverImageURL = "https://example.com/cover4.jpg",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 35, 1, 230, DateTimeKind.Utc).AddTicks(2374),
                            IsPublic = true,
                            Slug = "asp.net-core-mvc-tutorial",
                            Title = "ASP.NET Core MVC Tutorial"
                        },
                        new
                        {
                            Id = new Guid("c651c5ab-f9ec-492c-8055-48d246f917ae"),
                            BlogId = new Guid("5b6b8840-5345-4cb8-b12a-b4a6dff8c5de"),
                            Content = "Discussing the best practices every programmer should follow...",
                            CoverImageURL = "https://example.com/cover5.jpg",
                            CreatedDate = new DateTime(2024, 7, 22, 21, 35, 1, 230, DateTimeKind.Utc).AddTicks(2376),
                            IsPublic = true,
                            Slug = "best-ractices-in-rogramming",
                            Title = "Best Practices in Programming"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NormalizedName");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex(new[] { "NormalizedName" }, "Tag_NormalizedName_UK")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("05a4d57d-03f3-417a-b167-4f8c48d0d3e7"),
                            CreatedDate = new DateTime(2024, 7, 22, 21, 35, 1, 230, DateTimeKind.Utc).AddTicks(2322),
                            Description = "All things programming",
                            Name = "#Programming",
                            NormalizedName = "#PROGRAMMING"
                        },
                        new
                        {
                            Id = new Guid("580ad651-78da-4a01-abf7-f69c3530c3f7"),
                            CreatedDate = new DateTime(2024, 7, 22, 21, 35, 1, 230, DateTimeKind.Utc).AddTicks(2352),
                            Description = "Software engineering topics",
                            Name = "#SoftwareEngineering",
                            NormalizedName = "#SOFTWAREENGINEERING"
                        },
                        new
                        {
                            Id = new Guid("560bb08d-f954-4d11-9731-5c7b4177c378"),
                            CreatedDate = new DateTime(2024, 7, 22, 21, 35, 1, 230, DateTimeKind.Utc).AddTicks(2354),
                            Description = "Scientific discoveries and discussions",
                            Name = "#Science",
                            NormalizedName = "#SCIENCE"
                        },
                        new
                        {
                            Id = new Guid("57f63417-fcb6-4259-988c-863b243867e9"),
                            CreatedDate = new DateTime(2024, 7, 22, 21, 35, 1, 230, DateTimeKind.Utc).AddTicks(2355),
                            Description = "ASP.NET related content",
                            Name = "#ASP.Net",
                            NormalizedName = "#ASP.NET"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "21c958ca-ddd0-4644-bab9-1c6aabc5c0e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80d55535-89eb-4a37-aa05-4d60473f95e2",
                            Email = "johndoe@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EMAIL.COM",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGqtxt6dsGeJzexSGPDLFoe4opiIAWNHej0ncSlZWL8h1M4mFY+BVz48n4wZV6gPXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Blog", b =>
                {
                    b.HasOne("Domain.Entities.Author", "Author")
                        .WithOne("Blog")
                        .HasForeignKey("Domain.Entities.Blog", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Author", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.HasOne("Domain.Entities.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Domain.Entities.Tag", b =>
                {
                    b.HasOne("Domain.Entities.Post", null)
                        .WithMany("Tags")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Domain.Entities.Author", b =>
                {
                    b.Navigation("Blog")
                        .IsRequired();

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Domain.Entities.Blog", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
